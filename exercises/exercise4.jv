pipeline MobileTemperaturePipline{
    
    DataHttpExtractor
        -> ZipArchiveInterpreter
        -> DataFilePicker
        -> TemperatureTextFileInterpreter
        -> TemperatureCSVInterpreter
        -> DataSelector
        -> DataColumnDeleter
        -> HeaderWriter
        -> DataTableInterpreter
        -> CelsiusToFahrenheitTransformer
        -> CelsiusToBatteryTransformer
        -> DataLoader;
    
    block DataHttpExtractor oftype HttpExtractor {
        url:"https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block ZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block DataFilePicker oftype FilePicker {
       path: "./data.csv";
    }

    block TemperatureTextFileInterpreter oftype TextFileInterpreter {
        encoding: "utf8";
        lineBreak: /\r?\n/;
    }   

    block TemperatureCSVInterpreter oftype CSVInterpreter {
        delimiter : ";";
        enclosing: "";
        enclosingEscape : "";
    }

    block DataSelector oftype CellRangeSelector {
        select: range A1:J*;
    }

    block DataColumnDeleter oftype ColumnDeleter {
        delete: [
            column F, column G, column H, column I
        ];
    }

    block HeaderWriter oftype CellWriter {
        at: range A1:F1;
        write: ["id", "producer", "model", "month", "temperature", "battery_temperature"];
    }

    block DataTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype PositiveID,
            "producer" oftype NonEmptyText,
            "model" oftype NonEmptyText,
            "month" oftype MonthRange,
            "temperature" oftype TemperatureRange,
            "battery_temperature" oftype TemperatureRange,
        ];
    }

    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;

        Fahrenheit: (Celsius * 9/5) + 32;
    }

    block CelsiusToFahrenheitTransformer oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        uses: CelsiusToFahrenheit;
    }

    block CelsiusToBatteryTransformer oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        uses: CelsiusToFahrenheit;
    }
    
    block DataLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
        dropTable: true;
    }

}

// Define custom value types and constraints

valuetype PositiveID oftype integer {
    constraints: [PositiveIDConstraint];
}

constraint PositiveIDConstraint on integer: value > 0;

valuetype TemperatureRange oftype decimal {
    constraints: [TemperatureConstraint];
}

constraint TemperatureConstraint on decimal: value >= -100 and value <= 100;

valuetype MonthRange oftype integer {
    constraints: [MonthConstraint];
}

constraint MonthConstraint on integer: value >= 1 and value <= 12;

valuetype NonEmptyText oftype text {
    constraints: [NonEmptyConstraint];
}

constraint NonEmptyConstraint on text: value != '';
